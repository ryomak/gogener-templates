// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMaintenances(t *testing.T) {
	t.Parallel()

	query := Maintenances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMaintenancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Maintenances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMaintenancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Maintenances().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Maintenances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMaintenancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MaintenanceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Maintenances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMaintenancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MaintenanceExists(ctx, tx, o.Name)
	if err != nil {
		t.Errorf("Unable to check if Maintenance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MaintenanceExists to return true, but got false.")
	}
}

func testMaintenancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	maintenanceFound, err := FindMaintenance(ctx, tx, o.Name)
	if err != nil {
		t.Error(err)
	}

	if maintenanceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMaintenancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Maintenances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMaintenancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Maintenances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMaintenancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	maintenanceOne := &Maintenance{}
	maintenanceTwo := &Maintenance{}
	if err = randomize.Struct(seed, maintenanceOne, maintenanceDBTypes, false, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}
	if err = randomize.Struct(seed, maintenanceTwo, maintenanceDBTypes, false, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = maintenanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = maintenanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Maintenances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMaintenancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	maintenanceOne := &Maintenance{}
	maintenanceTwo := &Maintenance{}
	if err = randomize.Struct(seed, maintenanceOne, maintenanceDBTypes, false, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}
	if err = randomize.Struct(seed, maintenanceTwo, maintenanceDBTypes, false, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = maintenanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = maintenanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Maintenances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func maintenanceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Maintenance) error {
	*o = Maintenance{}
	return nil
}

func maintenanceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Maintenance) error {
	*o = Maintenance{}
	return nil
}

func maintenanceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Maintenance) error {
	*o = Maintenance{}
	return nil
}

func maintenanceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Maintenance) error {
	*o = Maintenance{}
	return nil
}

func maintenanceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Maintenance) error {
	*o = Maintenance{}
	return nil
}

func maintenanceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Maintenance) error {
	*o = Maintenance{}
	return nil
}

func maintenanceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Maintenance) error {
	*o = Maintenance{}
	return nil
}

func maintenanceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Maintenance) error {
	*o = Maintenance{}
	return nil
}

func maintenanceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Maintenance) error {
	*o = Maintenance{}
	return nil
}

func testMaintenancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Maintenance{}
	o := &Maintenance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, maintenanceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Maintenance object: %s", err)
	}

	AddMaintenanceHook(boil.BeforeInsertHook, maintenanceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	maintenanceBeforeInsertHooks = []MaintenanceHook{}

	AddMaintenanceHook(boil.AfterInsertHook, maintenanceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	maintenanceAfterInsertHooks = []MaintenanceHook{}

	AddMaintenanceHook(boil.AfterSelectHook, maintenanceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	maintenanceAfterSelectHooks = []MaintenanceHook{}

	AddMaintenanceHook(boil.BeforeUpdateHook, maintenanceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	maintenanceBeforeUpdateHooks = []MaintenanceHook{}

	AddMaintenanceHook(boil.AfterUpdateHook, maintenanceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	maintenanceAfterUpdateHooks = []MaintenanceHook{}

	AddMaintenanceHook(boil.BeforeDeleteHook, maintenanceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	maintenanceBeforeDeleteHooks = []MaintenanceHook{}

	AddMaintenanceHook(boil.AfterDeleteHook, maintenanceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	maintenanceAfterDeleteHooks = []MaintenanceHook{}

	AddMaintenanceHook(boil.BeforeUpsertHook, maintenanceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	maintenanceBeforeUpsertHooks = []MaintenanceHook{}

	AddMaintenanceHook(boil.AfterUpsertHook, maintenanceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	maintenanceAfterUpsertHooks = []MaintenanceHook{}
}

func testMaintenancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Maintenances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMaintenancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(maintenanceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Maintenances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMaintenancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMaintenancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MaintenanceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMaintenancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Maintenances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	maintenanceDBTypes = map[string]string{`Name`: `varchar`, `IsActive`: `tinyint`, `Message`: `text`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                  = bytes.MinRead
)

func testMaintenancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(maintenancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(maintenanceAllColumns) == len(maintenancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Maintenances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMaintenancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(maintenanceAllColumns) == len(maintenancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Maintenance{}
	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Maintenances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, maintenanceDBTypes, true, maintenancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(maintenanceAllColumns, maintenancePrimaryKeyColumns) {
		fields = maintenanceAllColumns
	} else {
		fields = strmangle.SetComplement(
			maintenanceAllColumns,
			maintenancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MaintenanceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMaintenancesUpsert(t *testing.T) {
	t.Parallel()

	if len(maintenanceAllColumns) == len(maintenancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMaintenanceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Maintenance{}
	if err = randomize.Struct(seed, &o, maintenanceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Maintenance: %s", err)
	}

	count, err := Maintenances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, maintenanceDBTypes, false, maintenancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Maintenance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Maintenance: %s", err)
	}

	count, err = Maintenances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
