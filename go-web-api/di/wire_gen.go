// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"[[.ModName]]/application/usecase"
	"[[.ModName]]/domain/service"
	"[[.ModName]]/infrastructure/db"
	"[[.ModName]]/infrastructure/firebase/auth"
	"[[.ModName]]/infrastructure/repository"
	"[[.ModName]]/presentation/middleware"
	"[[.ModName]]/presentation/api/v1/handler"
)

// Injectors from wire.go:

func MeHandler(db2 *db.Conn) (handler.Me, error) {
	client, err := auth.New()
	if err != nil {
		return nil, err
	}
	me := repository.NewMe(db2, client)
	usecaseMe := usecase.NewMe(me)
	handlerMe := handler.NewMe(usecaseMe)
	return handlerMe, nil
}

func AuthMiddleware(db2 *db.Conn) (*middleware.AuthMiddleware, error) {
	client, err := auth.New()
	if err != nil {
		return nil, err
	}
	authMiddleware := middleware.NewAuth(client)
	return authMiddleware, nil
}

func MaintenanceMiddleware(db2 *db.Conn) (*middleware.MaintenanceMiddleware, error) {
	maintenance := repository.NewMaintenance(db2)
	serviceMaintenance := service.NewMaintenance(maintenance)
	maintenanceMiddleware := middleware.NewMaintenance(serviceMaintenance)
	return maintenanceMiddleware, nil
}
